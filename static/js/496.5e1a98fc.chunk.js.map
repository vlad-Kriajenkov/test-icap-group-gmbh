{"version":3,"file":"static/js/496.5e1a98fc.chunk.js","mappings":"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","sources":["components/Buttons/Button/Button.styled.tsx","components/Buttons/Button/Button.tsx","components/Buttons/ButtonContact/ButtonContact.styled.jsx","components/Buttons/ButtonContact/ButtonContact.tsx","components/Buttons/ButtonDelet/ButtonDelet.styled.jsx","components/Buttons/ButtonDelet/ButtonDelet.tsx","components/InputCustom/InputCustom.styled.tsx","components/InputCustom/InputCustom.tsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.tsx","components/Modal/ModalContact/ModalContact.styled.jsx","components/Modal/ModalContact/ModalContact.tsx","components/Modal/ModalContactEddit/ModalContactEddit.styled.jsx","components/Modal/ModalContactEddit/ModalContactEddit.tsx","components/Modal/ModalContactAdd/ModalContactAdd.tsx","components/Table/Table.tsx","page/Home/Home.styled.jsx","page/Home/Home.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ButtonSt = styled.button`\n  background-color: transparent;\n  border: 1px solid #fff;\n  color: #fff;\n  padding: 1rem;\n  transition: all 1s;\n  :hover {\n    border: 1px solid #000;\n    color: #000;\n    background-color: #b0b0b0;\n  }\n  p {\n    font-size: 1rem;\n  }\n`;\n","import React from 'react';\nimport { IPropsBtn } from './interface';\nimport { ButtonSt } from './Button.styled';\nconst Button = (props: IPropsBtn) => {\n  const { typeBtn, label } = props;\n  return (\n    <ButtonSt type={typeBtn}>\n      <p>{label}</p>\n    </ButtonSt>\n  );\n};\n\nexport { Button };\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  font-size: 3rem;\n  background: none;\n  color: ${props => props.color};\n`;\n","import React, { FC } from 'react';\nimport { Button } from './ButtonContact.styled';\n\ninterface IProps {\n  typeBtn: 'submit' | 'reset' | 'button' | undefined;\n  targetModal:  any;\n  children: JSX.Element;\n  color?: string;\n}\n\nconst ButtonContact: FC<IProps> = props => {\n  const { typeBtn, targetModal, children, color } = props;\n  return (\n    <Button color={color} onClick={() => targetModal('add')} type={typeBtn}>\n      {children}\n    </Button>\n  );\n};\n\nexport { ButtonContact };\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  font-size: 3rem;\n  background: none;\n  color: ${props => props.color};\n`;\n","import React, { FC } from 'react';\nimport { Button } from './ButtonDelet.styled';\n\ninterface IProps {\n  typeBtn: 'submit' | 'reset' | 'button' | undefined;\n  handleClick: any;\n  children: JSX.Element;\n  color?: string;\n}\n\nconst ButtonDelet: FC<IProps> = props => {\n  const { typeBtn, handleClick, children, color } = props;\n  return (\n    <Button color={color} onClick={handleClick} type={typeBtn}>\n      {children}\n    </Button>\n  );\n};\n\nexport { ButtonDelet };\n","import styled from '@emotion/styled';\n\nexport const InputBox = styled.div`\n  position: relative;\n`;\nexport const Input = styled.input`\n  width: 100%;\n  padding: 10px 0;\n  font-size: 16px;\n  color: #fff;\n  margin-bottom: 30px;\n  border: none;\n  border-bottom: 1px solid #fff;\n  border-radius: 0;\n  outline: none;\n  background: transparent;\n  :valid ~ label {\n    top: -20px;\n    left: 0;\n    color: #03e9f4;\n    font-size: 12px;\n  }\n`;\n\nexport const Label = styled.label`\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 10px 0;\n  font-size: 1rem;\n  color: #fff;\n  pointer-events: none;\n  transition: 0.5s;\n`;\n\nexport const ErrorMesege = styled.p`\n  position: absolute;\n  top: -5px;\n  right: 0;\n  font-size: 0.54rem;\n  color: #a80a0a;\n`;\n","import React from 'react';\nimport { IProps } from './interface';\nimport { InputBox, Input, Label, ErrorMesege } from './InputCustom.styled';\nimport { useAppSelector } from 'redux/hook';\n\nconst InputCustom = (props: IProps) => {\n  const err = useAppSelector(state => state.contact.errorArray);\n  const { type, name, id, value, placeholder, handlerChange } = props;\n\n  return (\n    <InputBox>\n      <Input\n        type={type}\n        name={name}\n        id={id}\n        onChange={handlerChange}\n        value={value}\n      />\n      <Label>{placeholder}</Label>\n      <ErrorMesege>{err[name] && err[name][0]}</ErrorMesege>\n    </InputBox>\n  );\n};\n\nexport { InputCustom };\n","import styled from '@emotion/styled';\nimport BackGraund from 'assets/img/BackgroundBlurs.png';\n\nexport const Blackdrop = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(100%, 100%);\n  z-index: 100;\n\n  width: 100%;\n  height: 100dvh;\n\n  opacity: 1;\n  background: rgb(16, 26, 35);\n  background-image: url(${BackGraund});\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &.active {\n    transform: translate(-50%, -50%);\n  }\n`;\n\nexport const ButtonClose = styled.button`\n  position: absolute;\n  right: 0;\n  top: 0;\n  transform: translate(-2rem, 2rem);\n  background: none;\n  font-size: 3rem;\n  color: white;\n`;\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Blackdrop, ButtonClose } from './Modal.styled';\nimport { IModalProps } from './interface';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\nimport { refreshStateErroro } from 'redux/contacts/contacts-slice';\nimport { useAppDispatch } from 'redux/hook';\n\nconst Modal = (props: IModalProps) => {\n  const { children, handleBurger, targetModalAll } = props;\n  const dispatch = useAppDispatch();\n  const [targetModal, setTargetModal] = useState(false);\n  const errorArray = {\n    name: [],\n    email: [],\n    birthday_date: [],\n    phone_number: [],\n    address: [],\n  };\n\n  useEffect(() => {\n    setTargetModal(handleBurger);\n  }, [handleBurger]);\n\n  const closeModal = () => {\n    setTargetModal(false);\n    targetModalAll('closeAll');\n    dispatch(refreshStateErroro(errorArray));\n  };\n\n  const portalDiv = document.getElementById('modal-root') as HTMLElement;\n\n  return ReactDOM.createPortal(\n    <Blackdrop className={targetModal ? 'active' : ''}>\n      <div>{children}</div>\n      <ButtonClose type=\"button\" onClick={closeModal}>\n        <AiOutlineCloseCircle />\n      </ButtonClose>\n    </Blackdrop>,\n    portalDiv\n  );\n};\nexport { Modal };\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 30rem;\n\n  background-color: #000;\n  padding: 30px;\n`;\n","import React from 'react';\nimport { Form } from './ModalContact.styled';\nimport { InputCustom } from 'components/InputCustom';\nimport { Button } from 'components/Buttons/Button';\n\nexport interface IContact {\n  id?: number;\n  name: string;\n  email: string;\n  birthday_date: string;\n  phone_number: string;\n  address: string;\n}\ninterface IProps {\n  value: IContact;\n  handlerChange: any;\n  onSubmit: any;\n}\n\nconst ModalContact = (props: IProps) => {\n  const { value, handlerChange, onSubmit } = props;\n  return (\n    <Form onSubmit={onSubmit}>\n      <InputCustom\n        type=\"text\"\n        name=\"name\"\n        id=\"name\"\n        handlerChange={handlerChange}\n        value={value.name}\n        placeholder=\"Username\"\n      />\n\n      <InputCustom\n        type=\"text\"\n        name=\"email\"\n        id=\"email\"\n        handlerChange={handlerChange}\n        value={value.email}\n        placeholder=\"Email\"\n      />\n\n      <InputCustom\n        type=\"text\"\n        name=\"phone_number\"\n        id=\"phone\"\n        handlerChange={handlerChange}\n        value={value.phone_number}\n        placeholder=\"Phone\"\n      />\n\n      <InputCustom\n        type=\"text\"\n        name=\"birthday_date\"\n        id=\"birthday\"\n        handlerChange={handlerChange}\n        value={value.birthday_date}\n        placeholder=\"Birthday\"\n      />\n\n      <InputCustom\n        type=\"text\"\n        name=\"address\"\n        id=\"address\"\n        handlerChange={handlerChange}\n        value={value.address}\n        placeholder=\"Address\"\n      />\n\n      <Button typeBtn=\"submit\" label=\"save\" />\n    \n    </Form>\n  );\n};\n\nexport { ModalContact };\n","import styled from '@emotion/styled';\n\n \n\nexport const ButtonPositopn = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(-2rem, 6rem);\n`;\n","import React, { ChangeEvent, useEffect, useState, FormEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from 'redux/hook';\nimport {\n  deletContact,\n  getIdContatc,\n  patchContact,\n} from 'redux/contacts/contacts-operation';\nimport { ModalContact } from '../ModalContact/ModalContact';\nimport { ButtonDelet } from 'components/Buttons';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { ButtonPositopn } from './ModalContactEddit.styled';\nimport { refreshPage, refreshStateErroro } from 'redux/contacts/contacts-slice';\ninterface IContacProps {\n  id: number | undefined;\n}\n\nconst ModalContactEddit = (props: IContacProps) => {\n  const { id } = props;\n  const dispatch = useAppDispatch();\n  const contactData = useAppSelector(select => select.contact.contact);\n  const errorArray = {\n    name: [],\n    email: [],\n    birthday_date: [],\n    phone_number: [],\n    address: [],\n  };\n  const [userData, setUserData] = useState({\n    id: 0,\n    name: '',\n    email: '',\n    phone_number: '',\n    birthday_date: '',\n    address: '',\n  });\n\n  useEffect(() => {\n    dispatch(getIdContatc(id));\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    if (contactData) {\n      setUserData({\n        id: contactData.id,\n        name: contactData.name,\n        email: contactData.email || '',\n        phone_number: contactData.phone_number || '',\n        birthday_date: contactData.birthday_date || '',\n        address: contactData.address || '',\n      });\n    }\n  }, [contactData]);\n\n  const handlerChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    setUserData({ ...userData, [name]: value });\n  };\n\n  const onSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    dispatch(patchContact(userData));\n    dispatch(refreshStateErroro(errorArray));\n    dispatch(refreshPage());\n  };\n  const onDeleteContact = () => {\n    dispatch(deletContact(id));\n  };\n  return (\n    <>\n      <ModalContact\n        value={userData}\n        onSubmit={onSubmit}\n        handlerChange={handlerChange}\n      />\n      <ButtonPositopn>\n        <ButtonDelet color=\"red\" typeBtn=\"button\" handleClick={onDeleteContact}>\n          <AiFillDelete />\n        </ButtonDelet>\n      </ButtonPositopn>\n    </>\n  );\n};\n\nexport { ModalContactEddit };\n","import React, { ChangeEvent, useState, FormEvent } from 'react';\n\nimport { useAppDispatch } from 'redux/hook';\nimport { addContact } from 'redux/contacts/contacts-operation';\nimport { ModalContact } from '../ModalContact/ModalContact';\nimport { refreshPage, refreshStateErroro } from 'redux/contacts/contacts-slice';\n\nconst ModalContactAdd = () => {\n  const dispatch = useAppDispatch();\n\n  const [userData, setUserData] = useState({\n    name: '',\n    email: '',\n    birthday_date: '',\n    phone_number: '',\n    address: '',\n  });\n\n  const errorArray = {\n    name: [],\n    email: [],\n    birthday_date: [],\n    phone_number: [],\n    address: [],\n  };\n\n  const handlerChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setUserData({ ...userData, [name]: value });\n  };\n\n  const onSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    dispatch(addContact(userData));\n    dispatch(refreshStateErroro(errorArray));\n    dispatch(refreshPage())\n  };\n\n  return (\n    <ModalContact\n      value={userData}\n      onSubmit={onSubmit}\n      handlerChange={handlerChange}\n    />\n  );\n};\n\nexport { ModalContactAdd };\n","import * as React from 'react';\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n} from '@mui/material';\nimport { ModalContactAdd, ModalContactEddit } from 'components/Modal';\nimport { Modal } from '../Modal';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport { ButtonContact } from 'components/Buttons';\nimport { useAppSelector, useAppDispatch } from 'redux/hook';\nimport { getAllContats } from 'redux/contacts/contacts-operation';\ninterface Column {\n  id: 'name' | 'email' | 'birthday_date' | 'phone_number' | 'address';\n  label: string;\n  minWidth?: number;\n  align?: 'right';\n  format?: (value: number) => string;\n}\n\nconst columns: readonly Column[] = [\n  { id: 'name', label: 'Name', minWidth: 170 },\n  { id: 'email', label: 'Email', minWidth: 100 },\n  {\n    id: 'birthday_date',\n    label: 'Birthday',\n    minWidth: 170,\n  },\n  {\n    id: 'phone_number',\n    label: 'Phone',\n    minWidth: 170,\n  },\n  {\n    id: 'address',\n    label: 'Address',\n    minWidth: 170,\n  },\n];\n\nexport const StickyHeadTable = () => {\n  const rows = useAppSelector(state => state.contact.contactsInfo.contactsArrr);\n  const refreshPage = useAppSelector(state => state.contact.refreshPage);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const [idUser, setIdUser] = React.useState<number>();\n  const [edditModal, setEdditModal] = React.useState<boolean>(false);\n  const [addModal, setAddModal] = React.useState<boolean>(false);\n  const dispatch = useAppDispatch();\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  React.useEffect(() => {\n    dispatch(getAllContats());\n  }, [dispatch, refreshPage]);\n\n  const targetModal = (typeModal: string, id?: number) => {\n    if (typeModal === 'eddit') {\n      setIdUser(id);\n      setEdditModal(!edditModal);\n      setAddModal(false);\n    } else if (typeModal === 'add') {\n      setEdditModal(false);\n      setAddModal(!addModal);\n    } else if (typeModal === 'closeAll') {\n      setEdditModal(false);\n      setAddModal(false);\n    }\n  };\n\n  return (\n    <>\n      <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n        <TableContainer sx={{ maxHeight: 440 }}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map(column => (\n                  <TableCell\n                    key={column.id}\n                    align={column.align}\n                    style={{ minWidth: column.minWidth }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map(row => {\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      tabIndex={-1}\n                      key={row.id}\n                      onClick={() => targetModal('eddit', row.id)}\n                    >\n                      {columns.map(column => {\n                        const value = row[column.id];\n                        return (\n                          <TableCell key={column.id} align={column.align}>\n                            {column.format && typeof value === 'number'\n                              ? column.format(value)\n                              : value}\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <ButtonContact targetModal={targetModal} typeBtn=\"button\">\n          <AiOutlineUserAdd />\n        </ButtonContact>\n\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25, 100]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        ></TablePagination>\n      </Paper>\n\n\n      \n\n      {edditModal && (\n        <Modal handleBurger={edditModal} targetModalAll={targetModal}>\n          <ModalContactEddit id={idUser} />\n        </Modal>\n      )}\n      {addModal && (\n        <Modal handleBurger={addModal} targetModalAll={targetModal}>\n          <ModalContactAdd />\n        </Modal>\n      )}\n    </>\n  );\n};\n","import styled from '@emotion/styled';\nimport backGround from 'assets/img/BackgroundBlurs.png';\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-height: 100dvh;\n\n  background-image: url(${backGround});\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n`;\n\nexport const ContainerTable = styled.div`\n  width: 70rem;\n`;\nexport const ContainerAbout = styled.div`\n  width: 70rem;\n`;\nexport const Title = styled.h1`\n  font-size: 2rem;\n  padding: 1rem 0rem;\n`;\n\nexport const Img = styled.img`\n  width: 20rem;\n`","import React, { FC } from 'react';\nimport {\n  Container,\n  ContainerTable,\n  ContainerAbout,\n  Title,\n  Img,\n} from './Home.styled';\nimport { StickyHeadTable } from 'components/Table/Table';\nimport ImgGif from 'assets/img/sticker.webp';\nconst Home: FC = () => {\n  return (\n    <Container>\n      <Title>Contatcts</Title>\n      <ContainerTable>\n        <StickyHeadTable />\n      </ContainerTable>\n\n      <ContainerAbout>\n        <Title>About ME</Title>\n        <p>\n          Вітаю,спасибі за цікаве тестове завдання, зрозумів у чому потрібно\n          підтягнутися і які моменти краще опрацювати.що можу про себе\n          розповісти? є досвід більше року в фірмі на позиції Html-Developer.\n          Основні обов'язки були: верстка лендів, робота з jQuery, JS. 6 місяців\n          роботи на фрілансі frontend-developer (Vue/React), основні обов'язки\n          були: Верстка за макетом, робота з Api, робота з Анімацією.\n        </p>\n        <Title> І якщо що</Title>\n        <Img src={ImgGif} alt=\"\" />\n      </ContainerAbout>\n    </Container>\n  );\n};\nexport default Home;\n"],"names":["ButtonSt","styled","button","_templateObject","_taggedTemplateLiteral","Button","props","typeBtn","label","_jsx","type","children","color","ButtonContact","targetModal","onClick","ButtonDelet","handleClick","InputBox","div","Input","input","_templateObject2","Label","_templateObject3","ErrorMesege","p","_templateObject4","InputCustom","err","useAppSelector","state","contact","errorArray","name","id","value","placeholder","handlerChange","_jsxs","onChange","Blackdrop","BackGraund","ButtonClose","Modal","handleBurger","targetModalAll","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","setTargetModal","email","birthday_date","phone_number","address","useEffect","portalDiv","document","getElementById","ReactDOM","className","refreshStateErroro","AiOutlineCloseCircle","Form","form","ModalContact","onSubmit","ButtonPositopn","ModalContactEddit","contactData","select","userData","setUserData","getIdContatc","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","preventDefault","patchContact","refreshPage","stop","_x","apply","arguments","_Fragment","_e$target","target","_objectSpread","_defineProperty","deletContact","AiFillDelete","ModalContactAdd","addContact","columns","minWidth","StickyHeadTable","rows","contactsInfo","contactsArrr","_React$useState","React","_React$useState2","page","setPage","_React$useState3","_React$useState4","rowsPerPage","setRowsPerPage","_React$useState5","_React$useState6","idUser","setIdUser","_React$useState7","_React$useState8","edditModal","setEdditModal","_React$useState9","_React$useState10","addModal","setAddModal","getAllContats","typeModal","Paper","sx","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","align","style","TableBody","slice","row","hover","role","tabIndex","format","AiOutlineUserAdd","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","Container","backGround","ContainerTable","ContainerAbout","Title","h1","Img","img","_templateObject5","src","ImgGif","alt"],"sourceRoot":""}