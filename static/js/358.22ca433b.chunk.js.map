{"version":3,"file":"static/js/358.22ca433b.chunk.js","mappings":"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","sources":["page/AuthNavigation/Authorization/Authorization.styled.tsx","components/InputCustom/InputCustom.styled.tsx","components/InputCustom/InputCustom.tsx","components/Button/Button.styled.tsx","components/Button/Button.tsx","page/AuthNavigation/Authorization/shema.ts","page/AuthNavigation/Authorization/Authorization.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport BackImg from 'assets/img/BackgroundBlurs.png';\nexport const Container = styled.div`\n  min-height: 100dvh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 1.5rem;\n\n  background-image: url(${BackImg});\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  padding: 1rem;\n  width: 100%;\n  background: radial-gradient(\n    circle at bottom right,\n    rgba(127, 73, 99, 0.6) 0,\n    rgba(34, 62, 76, 0.5) 100%\n  );\n  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.6);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border-top: 1px solid rgba(255, 255, 255, 0.25);\n  border-right: 1px solid rgba(152, 152, 152, 0.18);\n  border-left: 1px solid rgba(43, 43, 43, 0.3);\n  border-bottom: 1px solid rgba(43, 43, 43, 0.3);\n  border-radius: 0.75rem;\n\n  @media screen and (min-width: 426px) {\n    width: 30rem;\n  }\n`;\n\nexport const Title = styled.h1`\n  font-size: 1.5rem;\n  margin: 0 0 30px;\n  padding: 0;\n  color: #fff;\n  text-align: center;\n`;\n","import styled from '@emotion/styled';\n\nexport const InputBox = styled.div`\n  position: relative;\n`;\nexport const Input = styled.input`\n  width: 100%;\n  padding: 10px 0;\n  font-size: 16px;\n  color: #fff;\n  margin-bottom: 30px;\n  border: none;\n  border-bottom: 1px solid #fff;\n  border-radius: 0;\n  outline: none;\n  background: transparent;\n  :valid ~ label {\n    top: -20px;\n    left: 0;\n    color: #03e9f4;\n    font-size: 12px;\n  }\n`;\n\nexport const Label = styled.label`\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 10px 0;\n  font-size: 1rem;\n  color: #fff;\n  pointer-events: none;\n  transition: 0.5s;\n`;\n\n \n","import React from 'react';\nimport { IProps } from './interface';\nimport { InputBox, Input, Label } from './InputCustom.styled';\n\nconst InputCustom = (props: IProps) => {\n  const { type, name, id, value, placeholder, handlerChange } = props;\n  return (\n    <InputBox>\n      <Input\n        type={type}\n        name={name}\n        id={id}\n        onChange={handlerChange}\n        value={value} \n      />\n      <Label>{placeholder}</Label>\n      \n    </InputBox>\n  );\n};\n\nexport { InputCustom };\n","import styled from '@emotion/styled';\n\nexport const ButtonSt = styled.button`\n  background-color: transparent;\n  border: 1px solid #fff;\n  color: #fff;\n  padding: 1rem;\n  transition: all 1s;\n  :hover {\n    border: 1px solid #000;\n    color: #000;\n    background-color: #b0b0b0;\n  }\n  p {\n    font-size: 1rem;\n  }\n`;\n","import React from 'react';\nimport { IPropsBtn } from './interface';\nimport { ButtonSt } from './Button.styled';\nconst Button = (props: IPropsBtn) => {\n  const { typeBtn, label } = props;\n  return (\n    <ButtonSt type={typeBtn}>\n      <p>{label}</p>\n    </ButtonSt>\n  );\n};\n\nexport { Button };\n","import { string, object } from 'yup';\n\nexport const shemaForm = object().shape({\n  userName: string()\n    .min(2, 'Username must be at least 1 characters long')\n    .max(150),\n  password: string()\n    .min(2, 'Password must be at least 1 characters long')\n    .max(128),\n});\n","import React, { ChangeEvent, FC, FormEvent, useState } from 'react';\n\nimport { Container, Form, Title } from './Authorization.styled';\nimport { InputCustom } from 'components';\nimport { Button } from 'components/Button/Button';\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useAppDispatch } from 'redux/hook';\nimport { shemaForm } from './shema';\nimport { logIn } from 'redux/auth/auth-operation';\n\nconst Authorization: FC = () => {\n  const [userName, setUserName] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const dispatch = useAppDispatch();\n\n  const handlerChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { value, name } = e.target;\n    switch (name) {\n      case 'name': \n        return setUserName(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        break;\n    }\n  };\n  const onSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    try {\n      await shemaForm.validate({ userName, password });\n      dispatch(logIn({ userName, password }));\n    } catch (error) {\n      const err = (error as Error).message;\n      Notify.failure(err);\n    }\n  };\n  return (\n    <Container>\n      <Form onSubmit={onSubmit}>\n        <Title>Authorization</Title>\n        <InputCustom\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          handlerChange={handlerChange}\n          value={userName}\n          placeholder=\"Username\"\n        />\n\n        <InputCustom\n          type=\"password\"\n          name=\"password\"\n          id=\"password\"\n          handlerChange={handlerChange}\n          value={password}\n          placeholder=\"Password\"\n        />\n        <Button typeBtn=\"submit\" label=\"Login\" />\n      </Form>\n    </Container>\n  );\n};\nexport default Authorization;\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","BackImg","Form","form","_templateObject2","Title","h1","_templateObject3","InputBox","Input","input","Label","label","InputCustom","props","type","name","id","value","placeholder","handlerChange","_jsxs","children","_jsx","onChange","ButtonSt","button","Button","typeBtn","shemaForm","object","shape","userName","string","min","max","password","_useState","useState","_useState2","_slicedToArray","setUserName","_useState3","_useState4","setPassword","dispatch","useAppDispatch","e","_e$target","target","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","err","wrap","_context","prev","next","preventDefault","validate","logIn","t0","message","Notify","failure","stop","_x","apply","arguments"],"sourceRoot":""}